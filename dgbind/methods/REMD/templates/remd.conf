# configuration for replica exchange scripts

# run simulation: 
#   mkdir output
#   (cd output; mkdir 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)
#   mpirun -np 16 -hostfile hostfile $bindir/namd2 +replicas 16 job0.conf +stdout output/%d/job0.%d.log
# the number of MPI ranks (-np) must be a multiple of the number of replicas (+replicas)

# to continue:
#   mpirun -np 16 -hostfile hostfile $bindir/namd2 +replicas 16 job1.conf +stdout output/%d/job1.%d.log
# increase num_runs below if job completed, or use latest restartXXX.tcl file available
# be sure to increment jobX for +stdout option on command line

# view in VMD:  source job0.conf; source ../show_replicas.vmd
# add continued:   source job1.conf; source ../show_replicas.vmd
# show both:  vmd -e load_all.vmd

# sort into single-temperature trajectories:
#   $bindir/sortreplicas output/%s/stretch_alanin.job0 16 10
#   $bindir/sortreplicas output/%s/stretch_alanin.job1 16 10

set num_replicas       {{ nwin }}
set num_umbrella       {{ nwin }}
set temp               {{ temperature }}
set num_temp           1
set steps_per_run      100
set num_runs           {{ numruns }}
# num_runs should be divisible by runs_per_frame * frames_per_restart
set runs_per_frame     50
set frames_per_restart 10
set namd_config_file   "namd.conf"
set output_root        "output/%s/{{ jobname }}" ; # directories must exist
set input_root         "input/input.%d" ; # initial configurations
#set pdbRoot           "input/start.%d" ; # initial configurations

proc replica_bias { i } {
  global num_umbrella
  set ix [expr $i % $num_umbrella]
  return [list BARNb "centers [expr {{ min }} + $ix*{{ bin }}]"]
}

proc replica_neighbors { i } {
  global num_umbrella
  global num_temp

  set nx $num_umbrella
  set ny $num_temp
  set ix [expr $i % $nx]
  set iy [expr $i / $nx]
  if { $ix % 2 } { set sx -1 } { set sx 1 }
  if { $iy % 2 } { set sy -1 } { set sy 1 }
  set result {}
  foreach { dx dy } { $sx 0 -$sx 0 0 $sy 0 -$sy } {
    set jx [expr $ix + $dx]
    set jy [expr $iy + $dy]
    if { $jx < 0 || $jx >= $nx || $jy < 0 || $jy >= $ny } {
      lappend result $i ; # swap with self                                                                                
    } {
      set j [expr $jy * $nx + $jx]
      lappend result $j
    }
  }
  return $result
}

proc replica_temp { i } {
  global num_umbrella num_temp min_temp max_temp temp
  if { num_temp == 1 } { return temp }
  set iy [expr $i / $num_umbrella]
  return [format "%.2f" [expr ($min_temp * \
         exp( log(1.0*$max_temp/$min_temp)*(1.0*$iy/($num_temp-1)) ) )]]
}     

proc umbrella_neighbors { i } {
  global num_umbrella
  global num_temp

  set nx $num_umbrella
  set ny $num_temp
  set ix [expr $i % $nx]
  set iy [expr $i / $nx]
  if { $ix % 2 } { set sx -1 } { set sx 1 }
  set result {}
  foreach { dx } { $sx -$sx } {
    set jx [expr $ix + $dx]
    if { $jx < 0 || $jx >= $nx || $iy < 0 || $iy >= $ny } {
      lappend result $i ; # swap with self
    } {
      set j [expr $iy * $nx + $jx]
      lappend result $j
    }
  }
  return $result
}

proc temp_neighbors { i } {
  global num_umbrella
  global num_temp

  set nx $num_umbrella
  set ny $num_temp
  set ix [expr $i % $nx]
  set iy [expr $i / $nx]
  if { $iy % 2 } { set sy -1 } { set sy 1 }
  set result {}
  foreach { dy } { $sy -$sy } {
    set jy [expr $iy + $dy]
    if { $jy < 0 || $jy >= $ny || $ix < 0 || $ix >= $nx } {
      lappend result $i ; # swap with self
    } {
      set j [expr $jy * $nx + $ix]
      lappend result $j
    }
  }
  return $result
}

# the following used only by show_replicas.vmd
set psf_file "../../../solvated/step3_pbcsetup.xplor.ext.psf"
set initial_pdb_file "../../../solvated/step3_pbcsetup.pdb"
set fit_pdb_file "../../../solvated/step3_pbcsetup.pdb"

